name: Build

on:
  push:
    branches: [main, build-test]
    tags: ["v*"] # Build on version tags
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  APP_NAME: "Universal DJ USB"
  PYTHON_VERSION: "3.11"

jobs:
  # Run tests first
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with dev

      - name: Run tests
        run: poetry run pytest

  # Build for macOS (both architectures)
  build:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Intel build
          - os: macos-13
            target: macos-x64
            arch: x64
          # macOS Apple Silicon build
          - os: macos-14
            target: macos-arm64
            arch: arm64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ matrix.arch }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with dev

      # Build using the build script (which handles its own dependency installation)
      - name: Build executables
        run: |
          chmod +x build.sh
          ./build.sh --both --skip-tests

      # Check build results and sizes
      - name: Check bundle sizes
        run: |
          echo "=== Build Results for ${{ matrix.target }} ==="
          ls -la dist/ || echo "No dist directory"

          [ -f "dist/udj" ] && echo "CLI size: $(ls -lh dist/udj | awk '{print $5}')"
          [ -d "dist/${{ env.APP_NAME }}.app" ] && echo "GUI app size: $(du -sh "dist/${{ env.APP_NAME }}.app" | cut -f1)"
          [ -f dist/*.dmg ] && echo "DMG size: $(du -sh dist/*.dmg | cut -f1)"

      # Prepare artifacts with consistent naming
      - name: Prepare artifacts
        run: |
          mkdir -p artifacts

          # Get version from pyproject.toml
          VERSION=$(poetry version -s)

          # macOS artifacts with architecture-specific naming
          if [ -f "dist/udj" ]; then
            cp "dist/udj" "artifacts/udj-${VERSION}-${{ matrix.target }}"
            chmod +x "artifacts/udj-${VERSION}-${{ matrix.target }}"
          fi

          # Look for DMG files and rename appropriately
          for dmg in dist/*.dmg; do
            if [ -f "$dmg" ]; then
              # Extract base name and add version and arch
              base_name=$(basename "$dmg" .dmg)
              cp "$dmg" "artifacts/${base_name}-${VERSION}-${{ matrix.target }}.dmg"
            fi
          done

          # If no DMG but app bundle exists, create tar.gz
          if [ -d "dist/${{ env.APP_NAME }}.app" ] && [ ! -f dist/*.dmg ]; then
            tar -czf "artifacts/Universal-DJ-USB-${VERSION}-${{ matrix.target }}.tar.gz" -C dist "${{ env.APP_NAME }}.app"
          fi

          # Show what we created
          echo "Created artifacts:"
          ls -la artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Universal-DJ-USB-${{ matrix.target }}
          path: artifacts/
          retention-days: 30
