name: Build Executables

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    timeout-minutes: 45
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: macos-latest
            artifact-name: universal-dj-usb-macos
            package-command: |
              mkdir -p release
              # Copy executables with platform-specific names for direct download
              cp dist/udj release/udj-macos
              cp -r "dist/Universal DJ USB.app" "release/" 2>/dev/null || echo "No app bundle found"
              # Create organized package
              cd release
              zip -r ../universal-dj-usb-macos.zip *
            artifact-path: universal-dj-usb-macos.zip
            test-command: ./dist/udj --help
            direct-files: |
              release/udj-macos
              release/Universal DJ USB.app
          - os: windows-latest
            artifact-name: universal-dj-usb-windows
            package-command: |
              mkdir release
              # Copy executables with platform-specific names for direct download
              copy "dist\Universal DJ USB.exe" "release\universal-dj-usb-gui-windows.exe" 2>nul || echo "No GUI exe found"
              copy "dist\udj.exe" "release\udj-windows.exe"
              # Create organized package
              powershell Compress-Archive -Path release\* -DestinationPath universal-dj-usb-windows.zip
            artifact-path: universal-dj-usb-windows.zip
            test-command: .\dist\udj.exe --help
            direct-files: |
              release/udj-windows.exe
              release/universal-dj-usb-gui-windows.exe
          - os: ubuntu-latest
            artifact-name: universal-dj-usb-linux
            package-command: |
              mkdir release
              # Copy executables with platform-specific names for direct download
              cp dist/udj release/udj-linux
              cp dist/"Universal DJ USB" release/universal-dj-usb-gui-linux 2>/dev/null || echo "No GUI executable found"
              # Create organized package
              cd release
              zip -r ../universal-dj-usb-linux.zip *
            artifact-path: universal-dj-usb-linux.zip
            test-command: ./dist/udj --help
            direct-files: |
              release/udj-linux
              release/universal-dj-usb-gui-linux

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.6.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libxcb-xinerama0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev --verbose

      - name: Install project
        run: poetry install --no-interaction

      - name: Make build script executable (Unix)
        if: runner.os != 'Windows'
        run: chmod +x build.sh

      - name: Build executables
        shell: bash
        run: ./build.sh

      - name: Test CLI executable
        shell: bash
        run: ${{ matrix.test-command }}

      - name: Package artifacts
        shell: bash
        run: ${{ matrix.package-command }}

      - name: Upload packaged artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}

      - name: Upload direct executables
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}-direct
          path: ${{ matrix.direct-files }}

  release:
    timeout-minutes: 15
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: universal-dj-usb-*
          path: artifacts/
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/universal-dj-usb-macos.zip
            artifacts/universal-dj-usb-windows.zip
            artifacts/universal-dj-usb-linux.zip
            artifacts/udj-macos
            artifacts/udj-windows.exe
            artifacts/udj-linux
            artifacts/universal-dj-usb-gui-windows.exe
            artifacts/universal-dj-usb-gui-linux
            artifacts/Universal DJ USB.app
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
